// CryptoTestingApp.cpp : Defines the entry point for the console application.
//

#include <string.h>

#include "sgx_urts.h"
#include "CryptoEnclave_u.h"

#include "stdio.h"
#include "stdlib.h"
#include "string.h"

#define BUFLEN 1048576
#define SGX_AESGCM_MAC_SIZE 16
#define SGX_AESGCM_IV_SIZE 12

#define ENCLAVE_FILE "CryptoEnclave.signed.so"

void emit_debug(const char *buf)

{
    // printf("DEBUG: %s\n", buf);
}

int main()
{
	// printf("Starting app...\n");
	
	/* Setup enclave */
	sgx_enclave_id_t eid;
	sgx_status_t ret;
	sgx_launch_token_t token = { 0 };
	int token_updated = 0;
	
	ret = sgx_create_enclave(ENCLAVE_FILE, SGX_DEBUG_FLAG, &token, &token_updated, &eid, NULL);
	if (ret != SGX_SUCCESS)
	{
		printf("sgx_create_enclave failed: %#x\n", ret);
		getchar();
		return 1;
	}

	// char *message = "Hello, crypto enclave!";
	char *message = "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";
	// printf("Original message: %s\n", message);

	// The encrypted message will contain the MAC, the IV, and the encrypted message itself.
	size_t encMessageLen = (SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE + strlen(message)); 
	char *encMessage = (char *) malloc((encMessageLen+1)*sizeof(char));

	// printf("Encrypting...\n");
	ret = encryptMessage(eid, message, strlen(message), encMessage, encMessageLen);
	encMessage[encMessageLen] = '\0';
	// printf("Encrypted message: %s\n", encMessage);
	
	// The decrypted message will contain the same message as the original one.
	size_t decMessageLen = strlen(message);
	char *decMessage = (char *) malloc((decMessageLen+1)*sizeof(char));

	// printf("Decrypting...\n");
	ret = decryptMessage(eid,encMessage,encMessageLen,decMessage,decMessageLen);
	decMessage[decMessageLen] = '\0';
	// printf("Decrypted message: %s", decMessage);

	return 0;
}
